// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderSchema util should match array-of-allofs.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {
        "title": "Test",
      },
      "enum": undefined,
      "id": "random-id",
      "path": Array [],
      "patternProperties": undefined,
      "properties": Object {
        "array-all-objects": Object {
          "items": Object {
            "allOf": Array [
              Object {
                "properties": Object {
                  "foo": Object {
                    "type": "string",
                  },
                },
              },
              Object {
                "properties": Object {
                  "bar": Object {
                    "type": "string",
                  },
                },
              },
            ],
            "type": "object",
          },
          "type": "array",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "allOf": Array [
          Object {
            "properties": Object {
              "foo": Object {
                "type": "string",
              },
            },
          },
          Object {
            "properties": Object {
              "bar": Object {
                "type": "string",
              },
            },
          },
        ],
        "type": "object",
      },
      "name": "array-all-objects",
      "path": Array [
        "properties",
        "array-all-objects",
      ],
      "required": false,
      "subtype": "allOf",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "combiner": "allOf",
      "id": "random-id",
      "name": "array-all-objects",
      "path": Array [
        "properties",
        "array-all-objects",
        "items",
      ],
      "properties": Array [
        Object {
          "properties": Object {
            "foo": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "bar": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
      ],
      "required": false,
      "type": "object",
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "path": Array [
        "properties",
        "array-all-objects",
        "items",
        "allOf",
        0,
      ],
      "patternProperties": undefined,
      "properties": Object {
        "foo": Object {
          "type": "string",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "foo",
      "path": Array [
        "properties",
        "array-all-objects",
        "items",
        "allOf",
        0,
        "properties",
        "foo",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "divider": "and",
      "enum": undefined,
      "id": "random-id",
      "path": Array [
        "properties",
        "array-all-objects",
        "items",
        "allOf",
        1,
      ],
      "patternProperties": undefined,
      "properties": Object {
        "bar": Object {
          "type": "string",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "bar",
      "path": Array [
        "properties",
        "array-all-objects",
        "items",
        "allOf",
        1,
        "properties",
        "bar",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match array-of-objects.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "path": Array [],
      "patternProperties": undefined,
      "properties": Object {
        "propertyIsArrayOfObjects": Object {
          "items": Object {
            "properties": Object {
              "ArrayObjectProperty": Object {
                "type": "string",
              },
            },
            "type": "object",
          },
          "type": Array [
            "array",
          ],
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "properties": Object {
          "ArrayObjectProperty": Object {
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "propertyIsArrayOfObjects",
      "path": Array [
        "properties",
        "propertyIsArrayOfObjects",
      ],
      "required": false,
      "subtype": "object",
      "type": Array [
        "array",
      ],
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "ArrayObjectProperty",
      "path": Array [
        "properties",
        "propertyIsArrayOfObjects",
        "items",
        "properties",
        "ArrayObjectProperty",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match array-of-refs.json 1`] = `
Array [
  Object {
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "$ref": "./models/todo-full.json",
      },
      "path": Array [],
      "subtype": "$ref( ./models/todo-full.json )",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match combiner-schema.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "annotations": Object {
        "title": "Todo Full",
      },
      "combiner": "allOf",
      "id": "random-id",
      "path": Array [],
      "properties": Array [
        Object {
          "properties": Object {
            "test": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "completed_at": Object {
              "format": "date-time",
              "type": Array [
                "string",
                "null",
              ],
            },
            "created_at": Object {
              "format": "date-time",
              "type": "string",
            },
            "id": Object {
              "maximum": 1000000,
              "minimum": 0,
              "type": "integer",
            },
            "updated_at": Object {
              "format": "date-time",
              "type": "string",
            },
          },
          "required": Array [
            "id",
          ],
          "type": "object",
        },
      ],
      "type": "object",
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "path": Array [
        "allOf",
        0,
      ],
      "patternProperties": undefined,
      "properties": Object {
        "test": Object {
          "type": "string",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "test",
      "path": Array [
        "allOf",
        0,
        "properties",
        "test",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "divider": "and",
      "enum": undefined,
      "id": "random-id",
      "path": Array [
        "allOf",
        1,
      ],
      "patternProperties": undefined,
      "properties": Object {
        "completed_at": Object {
          "format": "date-time",
          "type": Array [
            "string",
            "null",
          ],
        },
        "created_at": Object {
          "format": "date-time",
          "type": "string",
        },
        "id": Object {
          "maximum": 1000000,
          "minimum": 0,
          "type": "integer",
        },
        "updated_at": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "id",
      "path": Array [
        "allOf",
        1,
        "properties",
        "id",
      ],
      "required": true,
      "type": "integer",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "completed_at",
      "path": Array [
        "allOf",
        1,
        "properties",
        "completed_at",
      ],
      "required": false,
      "type": Array [
        "string",
        "null",
      ],
      "validations": Object {
        "format": "date-time",
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "created_at",
      "path": Array [
        "allOf",
        1,
        "properties",
        "created_at",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "format": "date-time",
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "updated_at",
      "path": Array [
        "allOf",
        1,
        "properties",
        "updated_at",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "format": "date-time",
      },
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match default-schema.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {
        "title": "User",
      },
      "enum": undefined,
      "id": "random-id",
      "path": Array [],
      "patternProperties": Object {
        "^id_": Object {
          "type": "number",
        },
        "_name$": Object {
          "type": "string",
        },
        "foo": Object {
          "type": "integer",
        },
      },
      "properties": Object {
        "age": Object {
          "maximum": 150,
          "minimum": 0,
          "type": "number",
        },
        "completed_at": Object {
          "format": "date-time",
          "type": "string",
        },
        "email": Object {
          "format": "email",
          "minLength": 2,
          "type": "string",
        },
        "items": Object {
          "description": "This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!",
          "items": Object {
            "type": Array [
              "string",
              "number",
            ],
          },
          "type": Array [
            "null",
            "array",
          ],
        },
        "name": Object {
          "description": "The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!",
          "type": "string",
        },
        "permissions": Object {
          "properties": Object {
            "ids": Object {
              "items": Object {
                "type": "integer",
              },
              "type": "array",
            },
          },
          "type": Array [
            "string",
            "object",
          ],
        },
        "plan": Object {
          "anyOf": Array [
            Object {
              "properties": Object {
                "bar": Object {
                  "type": "string",
                },
                "foo": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "foo",
                "bar",
              ],
              "type": "object",
            },
            Object {
              "items": Object {
                "type": "integer",
              },
              "type": "array",
            },
          ],
        },
        "ref": Object {
          "$ref": "#/definitions/error-response",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {
        "description": "The user's full name. This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!",
      },
      "enum": undefined,
      "id": "random-id",
      "name": "name",
      "path": Array [
        "properties",
        "name",
      ],
      "required": true,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "age",
      "path": Array [
        "properties",
        "age",
      ],
      "required": true,
      "type": "number",
      "validations": Object {
        "maximum": 150,
        "minimum": 0,
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "completed_at",
      "path": Array [
        "properties",
        "completed_at",
      ],
      "required": true,
      "type": "string",
      "validations": Object {
        "format": "date-time",
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "This description can be long and should truncate once it reaches the end of the row. If it's not truncating then theres and issue that needs to be fixed. Help!",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "type": Array [
          "string",
          "number",
        ],
      },
      "name": "items",
      "path": Array [
        "properties",
        "items",
      ],
      "required": false,
      "subtype": Array [
        "string",
        "number",
      ],
      "type": Array [
        "null",
        "array",
      ],
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "email",
      "path": Array [
        "properties",
        "email",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "format": "email",
        "minLength": 2,
      },
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "combiner": "anyOf",
      "id": "random-id",
      "name": "plan",
      "path": Array [
        "properties",
        "plan",
      ],
      "properties": Array [
        Object {
          "properties": Object {
            "bar": Object {
              "type": "string",
            },
            "foo": Object {
              "type": "string",
            },
          },
          "required": Array [
            "foo",
            "bar",
          ],
          "type": "object",
        },
        Object {
          "items": Object {
            "type": "integer",
          },
          "type": "array",
        },
      ],
      "required": false,
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "path": Array [
        "properties",
        "plan",
        "anyOf",
        0,
      ],
      "patternProperties": undefined,
      "properties": Object {
        "bar": Object {
          "type": "string",
        },
        "foo": Object {
          "type": "string",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "foo",
      "path": Array [
        "properties",
        "plan",
        "anyOf",
        0,
        "properties",
        "foo",
      ],
      "required": true,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "bar",
      "path": Array [
        "properties",
        "plan",
        "anyOf",
        0,
        "properties",
        "bar",
      ],
      "required": true,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "divider": "and/or",
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "type": "integer",
      },
      "path": Array [
        "properties",
        "plan",
        "anyOf",
        1,
      ],
      "subtype": "integer",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "permissions",
      "path": Array [
        "properties",
        "permissions",
      ],
      "patternProperties": undefined,
      "properties": Object {
        "ids": Object {
          "items": Object {
            "type": "integer",
          },
          "type": "array",
        },
      },
      "required": false,
      "type": Array [
        "string",
        "object",
      ],
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "type": "integer",
      },
      "name": "ids",
      "path": Array [
        "properties",
        "permissions",
        "properties",
        "ids",
      ],
      "required": false,
      "subtype": "integer",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "$ref": "#/definitions/error-response",
      "id": "random-id",
      "name": "ref",
      "path": Array [
        "properties",
        "ref",
      ],
      "required": false,
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "^id_",
      "path": Array [
        "patternProperties",
        "^id_",
      ],
      "pattern": true,
      "type": "number",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "foo",
      "path": Array [
        "patternProperties",
        "foo",
      ],
      "pattern": true,
      "type": "integer",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "_name$",
      "path": Array [
        "patternProperties",
        "_name$",
      ],
      "pattern": true,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match ref/original.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "path": Array [],
      "patternProperties": undefined,
      "properties": Object {
        "billing_address": Object {
          "$ref": "#/definitions/address",
        },
        "shipping_address": Object {
          "$ref": "#/definitions/address",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "$ref": "#/definitions/address",
      "id": "random-id",
      "name": "billing_address",
      "path": Array [
        "properties",
        "billing_address",
      ],
      "required": false,
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "$ref": "#/definitions/address",
      "id": "random-id",
      "name": "shipping_address",
      "path": Array [
        "properties",
        "shipping_address",
      ],
      "required": false,
    },
    "name": "",
  },
]
`;

exports[`renderSchema util should match tickets.schema.json 1`] = `
Array [
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 0,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {
        "description": "This section allows the selection of the ticketing options for all sales of the order.",
      },
      "enum": undefined,
      "id": "random-id",
      "path": Array [],
      "patternProperties": undefined,
      "properties": Object {
        "availableTicketingOptions": Object {
          "description": "List of ticketing options of the order.",
          "items": Object {
            "$ref": "../TicketingOptionInfo/TicketingOptionInfo.v1-0.yaml",
          },
          "type": "array",
        },
        "commonTicketingOptions": Object {
          "description": "Common ticketing options to all order items.",
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "ticketingOptionChoice": Object {
          "description": "Ticketing option selection per order item.",
          "items": Object {
            "properties": Object {
              "orderItemBreakdown": Object {
                "description": "Structure that contains ticketing options per order item.",
                "items": Object {
                  "properties": Object {
                    "options": Object {
                      "description": "Available ticketing options for a given order item.",
                      "items": Object {
                        "properties": Object {
                          "additionalRequiredInfo": Object {
                            "description": "Additional passenger required info specific to the given ticketing option.",
                            "type": "string",
                          },
                          "deliveryInfo": Object {
                            "description": "Data for ticket delivery.",
                            "properties": Object {
                              "availableDeliveryTypes": Object {
                                "items": Object {
                                  "enum": Array [
                                    "POSTAL",
                                    "PICK_UP_STATION",
                                    "E-MAIL",
                                    "LOYALTY_CARD",
                                  ],
                                  "type": "string",
                                },
                                "type": "array",
                              },
                              "ccEmail": Object {
                                "format": "email",
                                "type": "string",
                              },
                              "pickUpAtStation": Object {
                                "description": "The name of the Station in case you select pick up at station as a delivery type",
                                "type": "string",
                              },
                              "postalAddress": Object {
                                "$ref": "../Address/Address.v0-1.yaml",
                              },
                              "ticketRecipients": Object {
                                "items": Object {
                                  "enum": Array [
                                    "BOOKER",
                                    "CUSTOMER",
                                    "PASSENGER",
                                    "THIRD_PARTY",
                                  ],
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            },
                            "type": "object",
                          },
                          "selected": Object {
                            "description": "Flag to specify which ticketing option is selected. Only one option is allowed to be selected.",
                            "example": true,
                            "type": "boolean",
                          },
                          "title": Object {
                            "description": "Ticketing option short-description.",
                            "enum": Array [
                              "HOMEPRINT",
                              "TICKETLESS",
                              "PRINT_AT_KIOSK",
                              "SECURE_PAPER",
                            ],
                            "readOnly": true,
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "orderItemId": Object {
                      "format": "uuid",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "type": "array",
              },
              "state": Object {
                "default": "ACTIVE",
                "description": "The status that addresses if a specific ticket option is active or not. The status active is used before ticketing or before exchange confirmation. After ticketing, the status changes in completed. This allows to store ticketing options already used at ticketing time and to clean up all non selected options after ticketing or exchanged confirmation.",
                "enum": Array [
                  "COMPLETED",
                  "ACTIVE",
                ],
                "type": "string",
              },
            },
            "type": "object",
          },
          "type": "array",
        },
      },
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "List of ticketing options of the order.",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "$ref": "../TicketingOptionInfo/TicketingOptionInfo.v1-0.yaml",
      },
      "name": "availableTicketingOptions",
      "path": Array [
        "properties",
        "availableTicketingOptions",
      ],
      "required": false,
      "subtype": "$ref( ../TicketingOptionInfo/TicketingOptionInfo.v1-0.yaml )",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "Common ticketing options to all order items.",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "type": "string",
      },
      "name": "commonTicketingOptions",
      "path": Array [
        "properties",
        "commonTicketingOptions",
      ],
      "required": false,
      "subtype": "string",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 1,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "Ticketing option selection per order item.",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "properties": Object {
          "orderItemBreakdown": Object {
            "description": "Structure that contains ticketing options per order item.",
            "items": Object {
              "properties": Object {
                "options": Object {
                  "description": "Available ticketing options for a given order item.",
                  "items": Object {
                    "properties": Object {
                      "additionalRequiredInfo": Object {
                        "description": "Additional passenger required info specific to the given ticketing option.",
                        "type": "string",
                      },
                      "deliveryInfo": Object {
                        "description": "Data for ticket delivery.",
                        "properties": Object {
                          "availableDeliveryTypes": Object {
                            "items": Object {
                              "enum": Array [
                                "POSTAL",
                                "PICK_UP_STATION",
                                "E-MAIL",
                                "LOYALTY_CARD",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "ccEmail": Object {
                            "format": "email",
                            "type": "string",
                          },
                          "pickUpAtStation": Object {
                            "description": "The name of the Station in case you select pick up at station as a delivery type",
                            "type": "string",
                          },
                          "postalAddress": Object {
                            "$ref": "../Address/Address.v0-1.yaml",
                          },
                          "ticketRecipients": Object {
                            "items": Object {
                              "enum": Array [
                                "BOOKER",
                                "CUSTOMER",
                                "PASSENGER",
                                "THIRD_PARTY",
                              ],
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                      "selected": Object {
                        "description": "Flag to specify which ticketing option is selected. Only one option is allowed to be selected.",
                        "example": true,
                        "type": "boolean",
                      },
                      "title": Object {
                        "description": "Ticketing option short-description.",
                        "enum": Array [
                          "HOMEPRINT",
                          "TICKETLESS",
                          "PRINT_AT_KIOSK",
                          "SECURE_PAPER",
                        ],
                        "readOnly": true,
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "type": "array",
                },
                "orderItemId": Object {
                  "format": "uuid",
                  "type": "string",
                },
              },
              "type": "object",
            },
            "type": "array",
          },
          "state": Object {
            "default": "ACTIVE",
            "description": "The status that addresses if a specific ticket option is active or not. The status active is used before ticketing or before exchange confirmation. After ticketing, the status changes in completed. This allows to store ticketing options already used at ticketing time and to clean up all non selected options after ticketing or exchanged confirmation.",
            "enum": Array [
              "COMPLETED",
              "ACTIVE",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "ticketingOptionChoice",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
      ],
      "required": false,
      "subtype": "object",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "annotations": Object {
        "default": "ACTIVE",
        "description": "The status that addresses if a specific ticket option is active or not. The status active is used before ticketing or before exchange confirmation. After ticketing, the status changes in completed. This allows to store ticketing options already used at ticketing time and to clean up all non selected options after ticketing or exchanged confirmation.",
      },
      "enum": Array [
        "COMPLETED",
        "ACTIVE",
      ],
      "id": "random-id",
      "name": "state",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "state",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "enum": Array [
          "COMPLETED",
          "ACTIVE",
        ],
      },
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 2,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "Structure that contains ticketing options per order item.",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "properties": Object {
          "options": Object {
            "description": "Available ticketing options for a given order item.",
            "items": Object {
              "properties": Object {
                "additionalRequiredInfo": Object {
                  "description": "Additional passenger required info specific to the given ticketing option.",
                  "type": "string",
                },
                "deliveryInfo": Object {
                  "description": "Data for ticket delivery.",
                  "properties": Object {
                    "availableDeliveryTypes": Object {
                      "items": Object {
                        "enum": Array [
                          "POSTAL",
                          "PICK_UP_STATION",
                          "E-MAIL",
                          "LOYALTY_CARD",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ccEmail": Object {
                      "format": "email",
                      "type": "string",
                    },
                    "pickUpAtStation": Object {
                      "description": "The name of the Station in case you select pick up at station as a delivery type",
                      "type": "string",
                    },
                    "postalAddress": Object {
                      "$ref": "../Address/Address.v0-1.yaml",
                    },
                    "ticketRecipients": Object {
                      "items": Object {
                        "enum": Array [
                          "BOOKER",
                          "CUSTOMER",
                          "PASSENGER",
                          "THIRD_PARTY",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "selected": Object {
                  "description": "Flag to specify which ticketing option is selected. Only one option is allowed to be selected.",
                  "example": true,
                  "type": "boolean",
                },
                "title": Object {
                  "description": "Ticketing option short-description.",
                  "enum": Array [
                    "HOMEPRINT",
                    "TICKETLESS",
                    "PRINT_AT_KIOSK",
                    "SECURE_PAPER",
                  ],
                  "readOnly": true,
                  "type": "string",
                },
              },
              "type": "object",
            },
            "type": "array",
          },
          "orderItemId": Object {
            "format": "uuid",
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "orderItemBreakdown",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
      ],
      "required": false,
      "subtype": "object",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "orderItemId",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "orderItemId",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "format": "uuid",
      },
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 3,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {
        "description": "Available ticketing options for a given order item.",
      },
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "properties": Object {
          "additionalRequiredInfo": Object {
            "description": "Additional passenger required info specific to the given ticketing option.",
            "type": "string",
          },
          "deliveryInfo": Object {
            "description": "Data for ticket delivery.",
            "properties": Object {
              "availableDeliveryTypes": Object {
                "items": Object {
                  "enum": Array [
                    "POSTAL",
                    "PICK_UP_STATION",
                    "E-MAIL",
                    "LOYALTY_CARD",
                  ],
                  "type": "string",
                },
                "type": "array",
              },
              "ccEmail": Object {
                "format": "email",
                "type": "string",
              },
              "pickUpAtStation": Object {
                "description": "The name of the Station in case you select pick up at station as a delivery type",
                "type": "string",
              },
              "postalAddress": Object {
                "$ref": "../Address/Address.v0-1.yaml",
              },
              "ticketRecipients": Object {
                "items": Object {
                  "enum": Array [
                    "BOOKER",
                    "CUSTOMER",
                    "PASSENGER",
                    "THIRD_PARTY",
                  ],
                  "type": "string",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "selected": Object {
            "description": "Flag to specify which ticketing option is selected. Only one option is allowed to be selected.",
            "example": true,
            "type": "boolean",
          },
          "title": Object {
            "description": "Ticketing option short-description.",
            "enum": Array [
              "HOMEPRINT",
              "TICKETLESS",
              "PRINT_AT_KIOSK",
              "SECURE_PAPER",
            ],
            "readOnly": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "options",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
      ],
      "required": false,
      "subtype": "object",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "annotations": Object {
        "description": "Ticketing option short-description.",
      },
      "enum": Array [
        "HOMEPRINT",
        "TICKETLESS",
        "PRINT_AT_KIOSK",
        "SECURE_PAPER",
      ],
      "id": "random-id",
      "name": "title",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "title",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "enum": Array [
          "HOMEPRINT",
          "TICKETLESS",
          "PRINT_AT_KIOSK",
          "SECURE_PAPER",
        ],
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "annotations": Object {
        "description": "Flag to specify which ticketing option is selected. Only one option is allowed to be selected.",
      },
      "enum": undefined,
      "id": "random-id",
      "name": "selected",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "selected",
      ],
      "required": false,
      "type": "boolean",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "annotations": Object {
        "description": "Additional passenger required info specific to the given ticketing option.",
      },
      "enum": undefined,
      "id": "random-id",
      "name": "additionalRequiredInfo",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "additionalRequiredInfo",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "canHaveChildren": true,
    "id": "random-id",
    "level": 4,
    "metadata": Object {
      "additionalProperties": undefined,
      "annotations": Object {
        "description": "Data for ticket delivery.",
      },
      "enum": undefined,
      "id": "random-id",
      "name": "deliveryInfo",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
      ],
      "patternProperties": undefined,
      "properties": Object {
        "availableDeliveryTypes": Object {
          "items": Object {
            "enum": Array [
              "POSTAL",
              "PICK_UP_STATION",
              "E-MAIL",
              "LOYALTY_CARD",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "ccEmail": Object {
          "format": "email",
          "type": "string",
        },
        "pickUpAtStation": Object {
          "description": "The name of the Station in case you select pick up at station as a delivery type",
          "type": "string",
        },
        "postalAddress": Object {
          "$ref": "../Address/Address.v0-1.yaml",
        },
        "ticketRecipients": Object {
          "items": Object {
            "enum": Array [
              "BOOKER",
              "CUSTOMER",
              "PASSENGER",
              "THIRD_PARTY",
            ],
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": false,
      "type": "object",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 5,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "enum": Array [
          "POSTAL",
          "PICK_UP_STATION",
          "E-MAIL",
          "LOYALTY_CARD",
        ],
        "type": "string",
      },
      "name": "availableDeliveryTypes",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
        "properties",
        "availableDeliveryTypes",
      ],
      "required": false,
      "subtype": "string",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 5,
    "metadata": Object {
      "additionalItems": undefined,
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "items": Object {
        "enum": Array [
          "BOOKER",
          "CUSTOMER",
          "PASSENGER",
          "THIRD_PARTY",
        ],
        "type": "string",
      },
      "name": "ticketRecipients",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
        "properties",
        "ticketRecipients",
      ],
      "required": false,
      "subtype": "string",
      "type": "array",
      "validations": Object {},
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 5,
    "metadata": Object {
      "annotations": Object {},
      "enum": undefined,
      "id": "random-id",
      "name": "ccEmail",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
        "properties",
        "ccEmail",
      ],
      "required": false,
      "type": "string",
      "validations": Object {
        "format": "email",
      },
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 5,
    "metadata": Object {
      "$ref": "../Address/Address.v0-1.yaml",
      "id": "random-id",
      "name": "postalAddress",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
        "properties",
        "postalAddress",
      ],
      "required": false,
    },
    "name": "",
  },
  Object {
    "id": "random-id",
    "level": 5,
    "metadata": Object {
      "annotations": Object {
        "description": "The name of the Station in case you select pick up at station as a delivery type",
      },
      "enum": undefined,
      "id": "random-id",
      "name": "pickUpAtStation",
      "path": Array [
        "properties",
        "ticketingOptionChoice",
        "items",
        "properties",
        "orderItemBreakdown",
        "items",
        "properties",
        "options",
        "items",
        "properties",
        "deliveryInfo",
        "properties",
        "pickUpAtStation",
      ],
      "required": false,
      "type": "string",
      "validations": Object {},
    },
    "name": "",
  },
]
`;
